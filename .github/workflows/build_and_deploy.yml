name: Build and Deploy Flutter App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  # Code Quality Check
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Run tests
        run: flutter test

  # Build Android APK
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate splash screens
        run: flutter pub run flutter_native_splash:create

      - name: Generate app icons
        run: flutter pub run flutter_launcher_icons:main

      - name: Build Android Debug APK
        if: github.event_name == 'pull_request'
        run: |
          flutter build apk --debug

      - name: Build Android Release APK
        if: github.ref == 'refs/heads/main' || github.event_name == 'release'
        run: |
          flutter build apk --release --split-per-abi
          flutter build appbundle --release

      - name: Upload APK artifacts
        if: github.ref == 'refs/heads/main' || github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab

  # Build iOS IPA (requires macOS runner)
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate splash screens
        run: flutter pub run flutter_native_splash:create

      - name: Generate app icons
        run: flutter pub run flutter_launcher_icons:main

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: build/ios/iphoneos/Runner.app

  # Build Web version
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release --base-href /swift-prep-app/

      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-artifacts
          path: build/web

  # Deploy to GitHub Pages (optional)
  deploy-web:
    name: Deploy Web to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-web
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Download Web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-artifacts
          path: build/web

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web]
    if: github.event_name == 'release'
    steps:
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: android-artifacts

      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: ios-artifacts

      - name: Download Web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-artifacts
          path: web-artifacts

      - name: Create ZIP files
        run: |
          cd android-artifacts && zip -r ../android-build.zip . && cd ..
          cd ios-artifacts && zip -r ../ios-build.zip . && cd ..
          cd web-artifacts && zip -r ../web-build.zip . && cd ..

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            android-build.zip
            ios-build.zip
            web-build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.build-android.result == 'success' && needs.build-web.result == 'success' }}
        run: |
          echo "✅ Build completed successfully!"
          echo "Android APK: Ready"
          echo "Web build: Ready"

      - name: Notify Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Build failed!"
          echo "Check the logs for more details."